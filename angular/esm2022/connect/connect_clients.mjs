import { InjectionToken, NgModule } from "@angular/core";
import { ActivatedRoute, Router } from "@angular/router";
import { Code, ConnectError, createPromiseClient } from "@bufbuild/connect";
import { createConnectTransport } from "@bufbuild/connect-web";
import { AuthService, CalendarService, RoleService, SelfServiceService, UserService, RosterService, WorkShiftService, HolidayService, OffTimeService, WorkTimeService, CommentService } from "@tkd/apis";
import { CallService } from '@tkd/apis/gen/es/tkd/pbx3cx/v1/calllog_connect';
import * as i0 from "@angular/core";
export const CONNECT_CONFIG = new InjectionToken('CONNECT_CONFIG');
export const AUTH_SERVICE = new InjectionToken('AUTH_SERVICE');
export const SELF_SERVICE = new InjectionToken('SELF_SERVICE');
export const USER_SERVICE = new InjectionToken('USER_SERVICE');
export const ROLE_SERVICE = new InjectionToken('ROLE_SERVICE');
export const CALENDAR_SERVICE = new InjectionToken('CALENDAR_SERVICE');
export const HOLIDAY_SERVICE = new InjectionToken('HOLIDAY_SERVICE');
export const ROSTER_SERVICE = new InjectionToken('ROSTER_SERVICE');
export const WORK_SHIFT_SERVICE = new InjectionToken('WORK_SHIFT_SERVICE');
export const CALL_SERVICE = new InjectionToken('OVERWRITE_SERVICE');
export const OFFTIME_SERVICE = new InjectionToken('OFFTIME_SERVICE');
export const WORKTIME_SERVICE = new InjectionToken('WORKTIME_SERVICE');
export const COMMENT_SERVICE = new InjectionToken('COMMENT_SERVICE');
function serviceClientFactory(type, ep) {
    return ((route, router, cfg) => {
        let transport = transportFactory(route, router, cfg, ep);
        return createPromiseClient(type, transport);
    });
}
function makeProvider(token, type, ep) {
    return {
        deps: [
            ActivatedRoute,
            Router,
            CONNECT_CONFIG
        ],
        provide: token,
        useFactory: serviceClientFactory(type, ep),
    };
}
export const connectProviders = [
    makeProvider(AUTH_SERVICE, AuthService, "accountService"),
    makeProvider(SELF_SERVICE, SelfServiceService, "accountService"),
    makeProvider(USER_SERVICE, UserService, "accountService"),
    makeProvider(ROLE_SERVICE, RoleService, "accountService"),
    makeProvider(CALENDAR_SERVICE, CalendarService, "calendarService"),
    makeProvider(HOLIDAY_SERVICE, HolidayService, "calendarService"),
    makeProvider(ROSTER_SERVICE, RosterService, "rosterService"),
    makeProvider(WORK_SHIFT_SERVICE, WorkShiftService, "rosterService"),
    makeProvider(CALL_SERVICE, CallService, "callService"),
    makeProvider(OFFTIME_SERVICE, OffTimeService, "rosterService"),
    makeProvider(WORKTIME_SERVICE, WorkTimeService, "rosterService"),
    makeProvider(COMMENT_SERVICE, CommentService, "commentService")
];
const retryRefreshToken = (transport, activatedRoute, router) => {
    let pendingRefresh = null;
    return (next) => async (req) => {
        try {
            const result = await next(req);
            return result;
        }
        catch (err) {
            const connectErr = ConnectError.from(err);
            // don't retry the request if it was a Login or RefreshToken.
            if (req.service.typeName === AuthService.typeName && (req.method.name === 'Login' || req.method.name == 'RefreshToken')) {
                console.log("skipping retry as requested service is " + `${req.service.typeName}/${req.method.name}`);
                throw err;
            }
            if (connectErr.code === Code.Unauthenticated) {
                if (pendingRefresh === null) {
                    let _resolve;
                    let _reject;
                    pendingRefresh = new Promise((resolve, reject) => {
                        _resolve = resolve;
                        _reject = reject;
                    });
                    pendingRefresh
                        .catch(() => { })
                        .then(() => pendingRefresh = null);
                    const cli = createPromiseClient(AuthService, transport);
                    console.log(`[DEBUG] call to ${req.service.typeName}/${req.method.name} not authenticated, trying to refresh token`);
                    try {
                        let redirect = activatedRoute.snapshot.queryParamMap.get("redirect");
                        if (!redirect && router.getCurrentNavigation() !== null) {
                            redirect = router.getCurrentNavigation().extractedUrl.queryParamMap.get("redirect");
                        }
                        const res = await cli.refreshToken({
                            requestedRedirect: redirect || '',
                        });
                        _resolve();
                    }
                    catch (refreshErr) {
                        console.error("failed to refresh token", refreshErr);
                        _reject(err);
                        throw err;
                    }
                }
                else {
                    // wait for the pending refresh to finish
                    try {
                        await pendingRefresh;
                    }
                    catch (_) {
                        throw err;
                    }
                }
                // retry with a new access token.
                return await next(req);
            }
            throw err;
        }
    };
};
export function transportFactory(route, router, cfg, endpoint) {
    const retryTransport = createConnectTransport({ baseUrl: cfg["accountService"], credentials: 'include' });
    return createConnectTransport({
        baseUrl: cfg[endpoint],
        credentials: 'include',
        jsonOptions: {
            ignoreUnknownFields: true
        },
        interceptors: [
            retryRefreshToken(retryTransport, route, router),
        ],
    });
}
class TkdConnectModule {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TkdConnectModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }
    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "16.2.12", ngImport: i0, type: TkdConnectModule }); }
    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TkdConnectModule, providers: connectProviders }); }
}
export { TkdConnectModule };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TkdConnectModule, decorators: [{
            type: NgModule,
            args: [{
                    providers: connectProviders,
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,