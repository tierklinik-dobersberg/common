{"version":3,"file":"tkd-angular-connect.mjs","sources":["../../dev/projects/angular/connect/src/connect_clients.ts","../../dev/projects/angular/connect/src/public_api.ts","../../dev/projects/angular/connect/src/tkd-angular-connect.ts"],"sourcesContent":["import { InjectionToken, NgModule, Provider } from \"@angular/core\";\nimport { ActivatedRoute, Router } from \"@angular/router\";\nimport { Code, ConnectError, Interceptor, PromiseClient, Transport, createPromiseClient } from \"@bufbuild/connect\";\nimport { createConnectTransport } from \"@bufbuild/connect-web\";\nimport { AuthService, CalendarService, RoleService, SelfServiceService, UserService, RosterService, WorkShiftService, HolidayService, OffTimeService, WorkTimeService, CommentService } from \"@tkd/apis\";\nimport { CallService } from '@tkd/apis/gen/es/tkd/pbx3cx/v1/calllog_connect';\n\nexport interface ConnectConfig {\n  accountService: string;\n  calendarService: string;\n  rosterService: string;\n  commentService: string;\n  callService: string;\n}\n\nexport const CONNECT_CONFIG = new InjectionToken<ConnectConfig>('CONNECT_CONFIG');\n\nexport const AUTH_SERVICE = new InjectionToken<AuthServiceClient>('AUTH_SERVICE');\nexport const SELF_SERVICE = new InjectionToken<SelfServiceClient>('SELF_SERVICE');\nexport const USER_SERVICE = new InjectionToken<UserServiceClient>('USER_SERVICE');\nexport const ROLE_SERVICE = new InjectionToken<RoleServiceClient>('ROLE_SERVICE');\nexport const CALENDAR_SERVICE = new InjectionToken<CalendarServiceClient>('CALENDAR_SERVICE');\nexport const HOLIDAY_SERVICE = new InjectionToken<HolidayServiceClient>('HOLIDAY_SERVICE');\nexport const ROSTER_SERVICE = new InjectionToken<RosterServiceClient>('ROSTER_SERVICE');\nexport const WORK_SHIFT_SERVICE = new InjectionToken<WorkShiftServiceClient>('WORK_SHIFT_SERVICE');\nexport const CALL_SERVICE = new InjectionToken<CallServiceClient>('OVERWRITE_SERVICE');\nexport const OFFTIME_SERVICE = new InjectionToken<OffTimeServiceClient>('OFFTIME_SERVICE');\nexport const WORKTIME_SERVICE = new InjectionToken<WorkTimeServiceClient>('WORKTIME_SERVICE');\nexport const COMMENT_SERVICE = new InjectionToken<CommentServiceClient>('COMMENT_SERVICE');\n\nexport type AuthServiceClient = PromiseClient<typeof AuthService>;\nexport type SelfServiceClient = PromiseClient<typeof SelfServiceService>;\nexport type UserServiceClient = PromiseClient<typeof UserService>;\nexport type RoleServiceClient = PromiseClient<typeof RoleService>;\nexport type CalendarServiceClient = PromiseClient<typeof CalendarService>;\nexport type RosterServiceClient = PromiseClient<typeof RosterService>;\nexport type CallServiceClient = PromiseClient<typeof CallService>;\nexport type WorkShiftServiceClient = PromiseClient<typeof WorkShiftService>;\nexport type HolidayServiceClient = PromiseClient<typeof HolidayService>;\nexport type OffTimeServiceClient = PromiseClient<typeof OffTimeService>;\nexport type WorkTimeServiceClient = PromiseClient<typeof WorkTimeService>;\nexport type CommentServiceClient = PromiseClient<typeof CommentService>;\n\nfunction serviceClientFactory(type: any, ep: keyof ConnectConfig): (route: ActivatedRoute, router: Router, cfg: ConnectConfig) => any {\n  return ((route: ActivatedRoute, router: Router, cfg: ConnectConfig) => {\n    let transport = transportFactory(route, router, cfg, ep);\n    return createPromiseClient(type, transport);\n  });\n}\n\nfunction makeProvider(token: InjectionToken<any>, type: any, ep: keyof ConnectConfig): Provider {\n  return {\n    deps: [\n      ActivatedRoute,\n      Router,\n      CONNECT_CONFIG\n    ],\n    provide: token,\n    useFactory: serviceClientFactory(type, ep),\n  }\n}\n\nexport const connectProviders: Provider[] = [\n  makeProvider(AUTH_SERVICE, AuthService, \"accountService\") ,\n  makeProvider(SELF_SERVICE, SelfServiceService, \"accountService\"),\n  makeProvider(USER_SERVICE, UserService, \"accountService\"),\n  makeProvider(ROLE_SERVICE, RoleService, \"accountService\"),\n  makeProvider(CALENDAR_SERVICE, CalendarService, \"calendarService\"),\n  makeProvider(HOLIDAY_SERVICE, HolidayService, \"calendarService\"),\n  makeProvider(ROSTER_SERVICE, RosterService, \"rosterService\"),\n  makeProvider(WORK_SHIFT_SERVICE, WorkShiftService, \"rosterService\"),\n  makeProvider(CALL_SERVICE, CallService, \"callService\"),\n  makeProvider(OFFTIME_SERVICE, OffTimeService, \"rosterService\"),\n  makeProvider(WORKTIME_SERVICE, WorkTimeService, \"rosterService\"),\n  makeProvider(COMMENT_SERVICE, CommentService, \"commentService\")\n]\n\nconst retryRefreshToken: (transport: Transport, activatedRoute: ActivatedRoute, router: Router) => Interceptor = (transport, activatedRoute, router) => {\n  let pendingRefresh: Promise<void> | null = null;\n\n  return (next) => async (req) => {\n    try {\n      const result = await next(req)\n      return result;\n\n    } catch (err) {\n      const connectErr = ConnectError.from(err);\n\n      // don't retry the request if it was a Login or RefreshToken.\n      if (req.service.typeName === AuthService.typeName && (req.method.name === 'Login' || req.method.name == 'RefreshToken')) {\n        console.log(\"skipping retry as requested service is \" + `${req.service.typeName}/${req.method.name}`)\n\n        throw err\n      }\n\n      if (connectErr.code === Code.Unauthenticated) {\n        if (pendingRefresh === null) {\n          let _resolve: any;\n          let _reject: any;\n          pendingRefresh = new Promise((resolve, reject) => {\n            _resolve = resolve;\n            _reject = reject;\n          })\n\n          pendingRefresh\n            .catch(() => {})\n            .then(() => pendingRefresh = null)\n\n          const cli = createPromiseClient(AuthService, transport);\n\n          console.log(`[DEBUG] call to ${req.service.typeName}/${req.method.name} not authenticated, trying to refresh token`)\n          try {\n            let redirect = activatedRoute.snapshot.queryParamMap.get(\"redirect\");\n            if (!redirect && router.getCurrentNavigation() !== null) {\n              redirect = router.getCurrentNavigation()!.extractedUrl.queryParamMap.get(\"redirect\")\n            }\n\n            const res = await cli.refreshToken({\n              requestedRedirect: redirect || '',\n            })\n\n            _resolve();\n          } catch (refreshErr) {\n            console.error(\"failed to refresh token\", refreshErr)\n\n            _reject(err);\n\n            throw err;\n          }\n        } else {\n          // wait for the pending refresh to finish\n          try {\n            await pendingRefresh;\n          } catch (_) {\n            throw err;\n          }\n        }\n\n        // retry with a new access token.\n        return await next(req);\n      }\n\n      throw err;\n    }\n  }\n}\n\nexport function transportFactory(route: ActivatedRoute, router: Router, cfg: ConnectConfig, endpoint: keyof ConnectConfig): Transport {\n  const retryTransport = createConnectTransport({baseUrl: cfg[\"accountService\"], credentials: 'include'})\n\n  return createConnectTransport({\n    baseUrl: cfg[endpoint],\n    credentials: 'include',\n    jsonOptions: {\n      ignoreUnknownFields: true\n    },\n    interceptors: [\n      retryRefreshToken(retryTransport, route, router),\n    ],\n  })\n}\n\n@NgModule({\n  providers: connectProviders,\n})\nexport class TkdConnectModule {}","/*\n * Public API Surface of connect\n */\nexport * from './connect_clients'","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n"],"names":[],"mappings":"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"}