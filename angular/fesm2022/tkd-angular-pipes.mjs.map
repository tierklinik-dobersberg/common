{"version":3,"file":"tkd-angular-pipes.mjs","sources":["../../dev/components/pipes/utils.ts","../../dev/components/pipes/daytime.pipe.ts","../../dev/components/pipes/role-list.pipe.ts","../../dev/components/pipes/workday.pipe.ts","../../dev/components/pipes/duration.ts","../../dev/components/pipes/duration.pipe.ts","../../dev/components/pipes/in-list.pipe.ts","../../dev/components/pipes/to-user.pipe.ts","../../dev/components/pipes/user.pipes.ts","../../dev/components/pipes/public_api.ts","../../dev/components/pipes/tkd-angular-pipes.ts"],"sourcesContent":["export function toDateString(d: Date): string {\n  return `${d.getFullYear()}-${padLeft(''+(d.getMonth()+1), 2, '0')}-${padLeft(''+d.getDate(), 2, '0')}`\n}\n\nexport function padLeft(str: string, length: number, pad = ' '): string {\n    while (str.length < length) {\n        str = pad + str;\n    }\n    return str;\n}\n\nexport function padRight(str: string, length: number, pad = ' '): string {\n    while (str.length < length) {\n        str += pad;\n    }\n    return str;\n}\n\n","import { Duration } from '@bufbuild/protobuf';\nimport { Pipe, PipeTransform } from \"@angular/core\";\nimport { Daytime } from \"@tkd/apis\";\nimport { padLeft } from \"./utils\";\n\n@Pipe({\n  name: 'daytime',\n  pure: true,\n  standalone: true,\n})\nexport class DaytimePipe implements PipeTransform {\n  transform(value?: Daytime | string, duration?: Duration) {\n    if (!value) {\n      return ''\n    }\n\n    if (typeof value === 'string') {\n      const parts = value.split(\":\")\n      if (parts.length != 2) {\n        return '';\n      }\n\n      const hour = BigInt(+parts[0]);\n      const minute = BigInt(+parts[1]);\n\n      value = new Daytime({\n        hour,\n        minute,\n      })\n    }\n\n    if (duration !== undefined) {\n      const seconds = Number(value.hour)*60*60 + Number(value.minute)*60 + Number(duration.seconds)\n      const hour = Math.floor(seconds / 60 / 60)\n      const minutes = Math.floor( (seconds - (hour * 60 * 60)) / 60 );\n\n      value = new Daytime({\n        hour: BigInt(hour),\n        minute: BigInt(minutes),\n      })\n    }\n\n    return padLeft(`${value.hour}`, 2, '0') + ':' + padLeft(`${value.minute}`, 2, '0')\n  }\n}\n","import { PipeTransform, Pipe } from \"@angular/core\"\nimport { Role } from \"@tkd/apis\"\n\n@Pipe({\n  name: 'roleList',\n  pure: true,\n  standalone: true,\n})\nexport class RoleListPipe implements PipeTransform {\n\n  transform(value: string[] | undefined, roles: Role[]) {\n    if (!value) {\n      return ''\n    }\n\n    return value\n      .map(id => roles.find(role => role.id === id))\n      .filter(role => !!role)\n      .map(role => role!.name)\n      .join(', ')\n  }\n}\n","import { Pipe, PipeTransform } from \"@angular/core\"\n\nexport enum Workday {\n  So,\n  Mo,\n  Di,\n  Mi,\n  Do,\n  Fr,\n  Sa,\n}\n\n@Pipe({\n  name: 'workday',\n  pure: true,\n  standalone: true,\n})\nexport class WorkDayPipe implements PipeTransform {\n\n  transform(value?: number[], ...args: any[]) {\n    if (!value) {\n      return ''\n    }\n\n    return value\n      .map(day => Workday[day])\n      .join(', ')\n  }\n}\n","import { Duration as ProtoDuration } from '@bufbuild/protobuf';\nimport { padLeft } from './utils';\n\nconst nanosecond = 1;\nconst microsecond = 1000 * nanosecond;\nconst millisecond = 1000 * microsecond;\nconst second = 1000 * millisecond;\nconst minute = 60 * second;\nconst hour = 60 * minute;\nconst day = 24 * hour;\n\nexport type DurationLayout = 'default-hours' | 'default' | 'hh:mm' | 'hh:mm:ss';\n\nexport class Duration {\n  constructor(ns: number) {\n    this._nanoseconds = ns;\n  }\n\n  toProto(): ProtoDuration {\n    return new ProtoDuration({\n      seconds: BigInt(this.seconds),\n    })\n  }\n\n  get nanoseconds() {\n    return this._nanoseconds;\n  }\n\n  get microseconds() {\n    return Math.floor(this._nanoseconds / microsecond);\n  }\n\n  get milliseconds() {\n    return Math.floor(this._nanoseconds / millisecond);\n  }\n\n  get seconds() {\n    return Math.floor(this._nanoseconds / second);\n  }\n\n  get minutes() {\n    return Math.floor(this._nanoseconds / minute);\n  }\n\n  get hours() {\n    return Math.floor(this._nanoseconds / hour);\n  }\n\n  static nanosecond = new Duration(nanosecond);\n  static microsecond = new Duration(microsecond);\n  static millisecond = new Duration(millisecond);\n  static second = new Duration(second);\n  static minute = new Duration(minute);\n  static hour = new Duration(hour);\n  private _nanoseconds: number;\n\n  static nanoseconds(s: number): Duration {\n    return new Duration(s * nanosecond);\n  }\n  static microseconds(s: number): Duration {\n    return new Duration(s * microsecond);\n  }\n  static milliseconds(s: number): Duration {\n    return new Duration(s * millisecond);\n  }\n  static seconds(s: number): Duration {\n    return new Duration(s * second);\n  }\n  static minutes(s: number): Duration {\n    return new Duration(s * minute);\n  }\n  static hours(s: number): Duration {\n    return new Duration(s * hour);\n  }\n\n  addTo(d: Date): Date {\n    return new Date(d.getTime() + this.milliseconds);\n  }\n\n  format(layout: DurationLayout = 'default'): string {\n    if (layout === 'default' || layout === 'default-hours') {\n      return this.toString(layout === 'default-hours');\n    }\n\n    const sign = this._nanoseconds < 0 ? '-' : '';\n    let ns = Math.abs(this._nanoseconds);\n    const hours = Math.floor(ns / hour);\n    ns -= hours * hour;\n    const minutes = Math.floor(ns / minute);\n    ns -= minutes * minute;\n    const seconds = Math.floor(ns / second);\n    ns -= seconds * second;\n\n    let str = padLeft(hours.toString(), 2, '0') + ':' + padLeft(minutes.toString(), 2, '0');\n    if (layout === 'hh:mm:ss') {\n      str += ':' + padLeft(seconds.toString(), 2, '0');\n    }\n    return sign+str;\n  }\n\n  toString(skipDays = false): string {\n    const sign = this._nanoseconds < 0 ? '-' : '';\n    let ns = Math.abs(this._nanoseconds);\n    let str = '';\n\n    if (this._nanoseconds === 0) {\n      return '0h';\n    }\n\n    if (!skipDays) {\n      const days = Math.floor(ns / day)\n      if (days > 0) {\n        str += days.toString() + 'd ';\n        ns -= days * day;\n      }\n    }\n\n    const hours = Math.floor(ns / hour);\n    if (hours > 0) {\n      str += hours.toString() + 'h ';\n      ns -= hours * hour;\n    }\n\n    const minutes = Math.floor(ns / minute);\n    if (minutes > 0) {\n      str += minutes.toString() + 'm ';\n      ns -= minutes * minute;\n    }\n\n    const seconds = Math.floor(ns / second);\n    if (seconds > 0) {\n      str += seconds.toString() + 's ';\n      ns -= seconds * second;\n    }\n\n    const milliseconds = Math.floor(ns / millisecond);\n    if (milliseconds > 0) {\n      str += milliseconds.toString() + 'ms ';\n      ns -= milliseconds * millisecond;\n    }\n\n    const microseconds = Math.floor(ns / microsecond);\n    if (microseconds > 0) {\n      str += microseconds.toString() + 'µs ';\n      ns -= microseconds * microsecond;\n    }\n\n    if (ns > 0) {\n      str += ns.toString() + 'ns';\n      ns -= ns * nanosecond;\n    }\n\n    if (str.endsWith(\"\")) {\n      str = str.substring(0, str.length - 1)\n    }\n\n    return sign + str;\n  }\n\n  static parseString(v: string): Duration {\n    let time = 0;\n\n    let numberValue = '';\n    let suffix = '';\n    let state = 'number'\n    let parseFactor = 1;\n\n    const parse = () => {\n      let factor = 0;\n      switch (suffix) {\n        case 'd':\n          factor = day\n          break;\n        case 'h':\n          factor = hour\n          break;\n        case 'm':\n          factor = minute\n          break;\n        case 's':\n          factor = second\n          break;\n        case 'ms':\n          factor = millisecond\n          break;\n        case 'µs':\n          factor = microsecond\n          break;\n        case 'ns':\n          factor = nanosecond\n          break;\n        default:\n          throw new Error(`invalid time factor: ${suffix}`)\n      }\n\n      time += ((+numberValue) * factor)\n    }\n\n    try {\n      for (let i = 0; i < v.length; i++) {\n        const c = v.charAt(i)\n\n        if (c === ' ') {\n          continue\n        }\n\n        if (c === '-' && numberValue === '') {\n          parseFactor = -1\n\n          continue\n        }\n\n        if (state === 'number') {\n          if (!isNaN(+c)) {\n            numberValue += c\n\n            continue\n          }\n\n          state = 'suffix'\n          suffix += c\n\n          continue\n        }\n\n        if (state === 'suffix') {\n          if (isNaN(+c)) {\n            suffix += c\n            continue\n          }\n\n          parse()\n\n          numberValue = c\n          suffix = ''\n          state = 'number'\n        }\n      }\n\n      if (numberValue !== '') {\n        parse()\n      }\n\n      return new Duration(parseFactor * time)\n    } catch (err) {\n      return new Duration(0)\n    }\n  }\n\n  isLessThan(d: Duration) {\n    return this.nanoseconds < d.nanoseconds;\n  }\n\n  isGreatherThan(d: Duration) {\n    return this.nanoseconds > d.nanoseconds;\n  }\n\n  isEqual(d: Duration) {\n    return this.nanoseconds === d.nanoseconds;\n  }\n\n  valueOf(): number {\n    return this._nanoseconds;\n  }\n}\n\nexport function formatDate(d: Date | string | null, sep = '-'): string {\n  if (d === null) {\n    return ''\n  }\n\n  d = new Date(d)\n  let month = '' + (d.getMonth() + 1)\n  let day = '' + d.getDate()\n  let year = d.getFullYear()\n\n  if (month.length < 2)\n    month = '0' + month;\n  if (day.length < 2)\n    day = '0' + day;\n\n  return [year, month, day].join(sep);\n}\n","import { isDevMode, Pipe, PipeTransform } from '@angular/core';\nimport { PartialMessage, Duration as ProtoDuration } from '@bufbuild/protobuf';\nimport { DurationLayout, Duration as DurationUtil } from './duration';\n\nexport type InputUnit = 'ns' | 'µs' | 'ms' | 's' | 'm' | 'h';\n\n@Pipe({\n  name: 'duration',\n  pure: true,\n  standalone: true,\n})\nexport class DurationPipe implements PipeTransform {\n  transform(value: BigInt | string | number | DurationUtil | ProtoDuration | PartialMessage<ProtoDuration> | undefined, layout: DurationLayout = 'default', input: InputUnit = 's'): string {\n    if (value === undefined || value === null) {\n      return '';\n    }\n\n    if (value instanceof ProtoDuration || (typeof value === 'object' && value.hasOwnProperty('seconds'))) {\n      value = (value as ProtoDuration).seconds;\n      if (input !== 's') {\n        throw new Error('invalid input type when Duration from @bufbuild/protobuf is passed');\n      }\n    }\n\n    value = Number(value);\n\n    let d: DurationUtil;\n    switch (input) {\n      case 'h':\n        d = DurationUtil.hours(+value);\n        break;\n      case 'm':\n        d = DurationUtil.minutes(+value);\n        break;\n      case 's':\n        d = DurationUtil.seconds(+value);\n        break;\n      case 'ms':\n        d = DurationUtil.milliseconds(+value);\n        break;\n      case 'µs':\n        d = DurationUtil.microseconds(+value);\n        break;\n      case 'ns':\n        d = DurationUtil.nanoseconds(+value);\n        break;\n      default:\n        if (isDevMode()) {\n          return 'WRONG_LAYOUT';\n        }\n        return '';\n    }\n\n    return d.format(layout);\n  }\n}\n","import { Pipe, PipeTransform } from \"@angular/core\";\n\n@Pipe({\n  name: 'inList',\n  pure: true,\n  standalone: true,\n})\nexport class TkdInListPipe implements PipeTransform {\n  transform<T>(value: T | undefined, list: Iterable<T> | ArrayLike<T> | Set<T> | undefined): boolean {\n    if (value === undefined || value === null) {\n      return false;\n    }\n\n    if (list === null || list === undefined) {\n      return false;\n    }\n\n    if (list instanceof Set) {\n      return list.has(value)\n    }\n\n    return Array.from(list).some(t => t === value);\n  }\n}\n","import { Pipe, PipeTransform } from \"@angular/core\";\nimport { Profile } from \"@tkd/apis\";\n\n@Pipe({\n  name: 'toUser',\n  pure: true,\n  standalone: true,\n})\nexport class ToUserPipe implements PipeTransform {\n  transform(idOrProfile: Profile | string, profiles: Profile[]): Profile | null {\n    if (idOrProfile instanceof Profile) {\n      return idOrProfile;\n    }\n\n    return profiles.find(p => p.user?.id === idOrProfile) || null;\n  }\n}\n\n@Pipe({\n  name: \"displayName\",\n  pure: true,\n  standalone: true,\n})\nexport class DisplayNamePipe implements PipeTransform {\n  transform(value: Profile | null, ...args: any[]) {\n      if (!value) {\n        return ''\n      }\n\n      if (value.user?.displayName) {\n        return value.user.displayName;\n      }\n\n      if (value.user?.username) {\n        return value.user.username\n      }\n\n      return '';\n  }\n}\n","import { Pipe, PipeTransform } from \"@angular/core\";\nimport { Profile, User } from \"@tkd/apis\";\n\nexport enum UserExtraKey {\n  CalendarID = \"calendarId\",\n  Color = \"color\",\n}\n\nexport interface UserProfile extends Profile {\n  user: User & {\n    extra: {\n      fields: {\n        [UserExtraKey.CalendarID]?: {\n          kind: {\n            case: 'stringValue';\n            value: string,\n          }\n        },\n        [UserExtraKey.Color]?: {\n          kind: {\n            case: 'stringValue';\n            value: string,\n          }\n        },\n      }\n    }\n  }\n}\n\nexport function getCalendarId(user: UserProfile | Profile): string | null {\n  const prop = user.user?.extra?.fields[UserExtraKey.CalendarID];\n\n  if (!prop || prop.kind.case !== 'stringValue') {\n    return null\n  }\n\n  return prop.kind.value;\n}\n\nexport function getUserColor(user: UserProfile | Profile): string | null {\n  const prop = user.user?.extra?.fields[UserExtraKey.Color];\n\n  if (!prop || prop.kind.case !== 'stringValue') {\n    return null\n  }\n\n  return prop.kind.value;\n}\n\nexport function parseColor(input: string): number[] {\n  if (input.substr(0, 1) === '#') {\n    const collen = (input.length - 1) / 3;\n    const fact = [17, 1, 0.062272][collen - 1];\n    return [\n      Math.round(parseInt(input.substr(1, collen), 16) * fact),\n      Math.round(parseInt(input.substr(1 + collen, collen), 16) * fact),\n      Math.round(parseInt(input.substr(1 + 2 * collen, collen), 16) * fact),\n    ];\n  }\n\n  return input\n    .split('(')[1]\n    .split(')')[0]\n    .split(',')\n    .map((x) => +x);\n}\n\nexport function getContrastFontColor(bgColor: string | null): string {\n  // if (red*0.299 + green*0.587 + blue*0.114) > 186 use #000000 else use #ffffff\n  // based on https://stackoverflow.com/a/3943023\n\n  if (bgColor === null) {\n    return '#000000'\n  }\n\n  let col = bgColor;\n  if (bgColor.startsWith('#') && bgColor.length > 7) {\n    col = bgColor.slice(0, 7);\n  }\n  const [r, g, b] = parseColor(col);\n\n  if (r * 0.299 + g * 0.587 + b * 0.114 > 186) {\n    return '#000000';\n  }\n\n  return '#ffffff';\n}\n\n@Pipe({\n    name: 'color',\n    pure: true,\n    standalone: true,\n})\nexport class UserColorPipe implements PipeTransform {\n    transform(value: Profile, ...args: any[]) {\n      return getUserColor(value)\n    }\n}\n\n@Pipe({\n    name: 'contrastColor',\n    pure: true,\n    standalone: true,\n})\nexport class UserContrastColorPipe implements PipeTransform {\n    transform(value: Profile, ...args: any[]) {\n      return getContrastFontColor(getUserColor(value))\n    }\n}\n","/*\n * Public API Surface of connect\n */\nexport * from './daytime.pipe';\nexport * from './role-list.pipe';\nexport * from './workday.pipe';\nexport * from './duration.pipe';\nexport * from './in-list.pipe';\nexport * from './to-user.pipe';\nexport * from './user.pipes';\nexport * from './duration';","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n"],"names":["ProtoDuration","DurationUtil"],"mappings":"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"}